#+TITLE: Design Notes

This is a scratch pad used for staging notes before they find their place in
more structured and permanent locations.

* Sprint deliverables
- Parsing spec reference IDs out of artifacs (including markdown and code)
- Creation of database of linked artifacts
- Linkification of spec reference IDs in the artifacts
- Generation of a static site to give an overview of connected artifacts
- Suggestion of link reference IDs by fuzzy matching on spec text and ID tag
* Aim

Tracer is a prosthetic device for cultivating, and connecting within, the [[./docs/src/terminology.md#CONTEXT.1][context]]
of software development for critical systems.

It is designed to support *DOVES:dove:*: Development and Operations that are
Verifiable and Explicitly Specified.

It seeks to improve the productivity of distributed teams of developers by
supporting them throughout the development process and providing means to ensure
the correctness and continuity of communication, implementation, and operation.

- Maximally :: To enable formally specified and verified development of proven
  correct programs shaped through distributed and modular development.
- Minimally :: To provide the automated convenience of relevant information
  ready to hand while doing the work of specification, implementation, and
  verification.

* Features

- Simplifies navigation through different project artifacts including
  - English specs
  - Formal specs (e.g., TLA+)
  - Source code of implementation(s)
- Cross-repo search capabilities

* Principles
** Integrate semiotics systems
This is the core functionality we aim to provide: a way of integrating semiotic
systems by providing a way of mapping one system onto another according to the
traces left.
** Maximize economy of cognition
Every disruption to the process of cogitating and synthesizing the systems
presented increases risks of misunderstanding and failed comprehension.

* Tasks
** TODO Refine =unit list= command
https://github.com/informalsystems/themis-tracer/issues/16

- [ ] Make output from =unit list= much simpler and easier to read
- [ ] Add a command =unit show TAG= that gives complete info for a unit

** TODO Make =context new= also switch the context
** TODO Use zerocopy for cheap serde https://github.com/spacejam/sled/blob/main/examples/structured.rs#L17
** TODO Software development as a value flow

| activity       | inputs                                    | process | output                       |
|----------------+-------------------------------------------+---------+------------------------------|
| all            | I = time, commons (OSS, domain knowledge) | any     | all                          |
| specification  | I                                         | writing | specs                        |
| implementation | I, specs                                  | coding  | program                      |
| verification   | I, program                                | testing | evidence of program -> specs |

#+begin_quote
To trace: follow the completed path backwards from its current point to where it began.

To track: follow the emerging path forwards from your starting point to wherever the thing currently is.
#+end_quote
https://valueflo.ws/appendix/track.html

* Ideas

** Requirement tagging via macros

#+BEGIN_SRC rust
#[implements("SPEC-HELLO.1")]
fn hello() {
    ...
}
#+END_SRC
** Use a mergeable and branchable datastore
*** TODO Rationale
Viewpoints, diversity of tracing networks.
*** TODO Advantages
*** TODO Options
- TerminusDB
- Irmin

* Data storage

After quite in depth consideration, I've opted to use sqlite as the backend for
prototyping and initial development.

** TODO Consider using git as backend?
- Each context can be its own [[https://git-scm.com/docs/gitnamespaces][namespace]], and the namespaces can share the
  repository and unit data.
- Branches for allowing different people/orgs to maintain
  different, potentially divergent or augmented, perspectives on a shared
  underlying context
    - This might obviate (or be obviated by) nested contexts.


** tl;dr:

- it is a long-established industry standard
- it is high-level
- it will save time in implementing a bespoke storage data scheme
- it will likely save hundreds of lines of code of relational lookup logic
- it is not likely to meet with pushback from technologically conservative
  people in our org.

** Requirements

- Need to be able to update all LUs of a repo.
- Need to be able to switch contexts
- Need to be able to lookup logical units
- Need to be able to load all logical units of a context
- Need to be able to update and add/remove logical units
- Need to be able to update and add/remove repos
- Need to be able to find the source for a logical unit

** Pros/cons evaluation table of options

| Option       | Cons                                                                                               | Pros                                                        | Risk                  |
|--------------+----------------------------------------------------------------------------------------------------+-------------------------------------------------------------+-----------------------|
| Files system | Low-level,                                                                                         | Integration with git, can share without rebuilding          |                       |
| KV-Store     | Some queries are convoluted and inefficient, opaque storage                                        | Mid-level                                                   |                       |
| Sqlite       | Learning curve, expressivity limits, opaque storage, why rust then?                                | High-level, easy to query complex relations                 |                       |
| Prolog       | External dependency (just package), have implement integration, pushback from team, why rust then? | Very-high-level, git integration, can share with rebuilding | Integration? Pushback |

** Sketch of options
*** KV-Store

A single sled db, with trees:

- context
  - current: context
  - foo: context
  - bar: context
- repo/a:
  - lu1-id: lu1
  - lu2-id: lu2
- repo/b: lus
- repo/info
  - repo/a : {location}

Each context entry includes:

- name: string
- repos: repo-ids list

Each repo entry includes

- repo-location info
- logical-units

**** Sharing

Export the =context=. Share that, Other users reconstruct.

*** Sqlite

The usual. Logic follows Prolog, but queries will be more cumbersome. Tech is
more widely known tho.

*** Prolog

#+begin_src prolog
current_context(foo).

context(foo).
context(bao).

context_repo(foo, repo-a).
context_repo(foo, repo-b).

repo(repo-a, location).
repo(repo-b, loation).

lu(id1, def, source, repo).
lu(id2, def, source, repo).
#+end_src

#+begin_quote prolog
repo_lu(Repo, Lu):- Lu = lu(ID, Def, Src, Repo), Lu.
repo_lus(Repo, Lus) :- findall(Lu, repo_lu(Repo, Lu), Lus).

context_repos(Context, Repos) :- findall(Repo, context_repo(Context, Repo), Repos).
#+end_quote

*** File system

#+begin_src fundamental
~/.tracer\
        |- user # User info
        |- repo\ # Tracked repos
               |- repo-1/
               |- repo-2\
                        |- self.cfb # Info on where to find the repo
                        |- unit\
                               |- TRC-TAG.1\
                                           |- SYNTAX.1\
                                                      |- {kind, content, references, source} # A Logical unit
        |- contexts\
                   |- order                 # Records the mereological relations between contexts
                   |- current ->  <contxt> # Symbolic link to current context
                   |- context\
                             |- info
                             |- repo-1 -> repo-1 
                   |- context-2.cfg
#+end_src

Context =.cfg= files

#+begin_src json
{ "name": "context-1"
, "repos": [ "repo-1", "repo-2" ] }
#+end_src

Repos =.cfg= files:

#+begin_src json
{ "location": "<location>" }
#+end_src


* References

- sexp lib :: https://github.com/rotty/lexpr-rs

* STRT Research
** STRT Read ICS 1 and EIP 1
These set out approaches to requirement engineering. The fact that the state of
the art is some ad hoc rules in a markdown file makes it pretty clear this area
is ripe for invetions.

- https://github.com/cosmos/ics/tree/master/spec/ics-001-ics-standard
- https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1.md
** STRT Review light client spec
https://github.com/tendermint/spec/tree/master/rust-spec/lightclient
